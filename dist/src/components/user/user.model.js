"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const mongoose_1 = __importDefault(require("mongoose"));
const logger_config_1 = require("../../config/logger.config");
const userSchema = new mongoose_1.default.Schema({
    userId: {
        type: String,
        unique: true
    },
    password: {
        type: String
    },
    email: {
        type: String,
        lowercase: true
    },
    firstName: {
        type: String
    },
    lastName: {
        type: String
    },
    photoUrl: {
        type: String
    },
    disciplineIds: [
        {
            type: String,
            ref: 'Discipline'
        }
    ],
    positionId: {
        type: String,
        ref: 'Position'
    },
    departmentId: {
        type: String,
        ref: 'Department'
    },
    gender: {
        type: String
    },
    nationality: {
        type: String
    },
    workFocusName: {
        type: String,
        default: 'Balanced',
        ref: 'WorkFocus'
    },
    createdAt: {
        type: Date
    },
    updatedAt: {
        type: Date
    }
}, {
    timestamps: true,
    toJSON: {
        virtuals: true
    },
    toObject: {
        virtuals: true
    }
});
// VIRTUALS
userSchema.virtual('disciplines', {
    ref: 'Discipline',
    localField: 'disciplineIds',
    foreignField: 'disciplineId'
});
userSchema.virtual('position', {
    ref: 'Position',
    localField: 'positionId',
    foreignField: 'positionId',
    justOne: true
});
userSchema.virtual('workFocus', {
    ref: 'WorkFocus',
    localField: 'workFocusName',
    foreignField: 'name',
    justOne: true
});
userSchema.virtual('department', {
    ref: 'Department',
    localField: 'departmentId',
    foreignField: 'departmentId',
    justOne: true
});
// userSchema.virtual('full').get(function (this: any) {
//   return (
//     this.userId +
//     '.' +
//     this.email +
//     '.' +
//     this.firstName +
//     '.' +
//     this.lastName +
//     '.' +
//     this.photoUrl +
//     '.' +
//     this.workFocusName +
//     '.' +
//     this.disciplineId +
//     '.' +
//     this.positionId +
//     '.' +
//     this.gender +
//     '.' +
//     this.nationality
//   );
// });
// HOOKS
// Pre-hook to hash password. Make sure to use function and not arrow (lexical 'this' problem)
userSchema.pre('save', function (next) {
    // Generate default Work Focus
    this.workFocusName = 'Balanced';
    // Generate random password
    // user.password = Math.random().toString(36).slice(-8);
    this.password = 'Password01';
    logger_config_1.logger.info(this.password);
    // Prepare and send user account mail
    // const mailOptions = {
    //   from: "c4mahlangu@gmail.com", // sender address
    //   to: user.email, // list of receivers
    //   subject: "Eworkload Credentials", // Subject line
    //   html: `<p>Welcome to the Eworkload system. Please find default credentials below</p>
    //         <p>User ID: ${user.userId}</p>
    //         <p>Password: ${user.password}</p>
    //         <br>
    //         <p>Autogenerated password may be changed from the user profile at any time.</p>
    //         <p>Kind regards</p>
    //         <p>Administrator</p>`, // plain text body
    // };
    // console.log("Mail options", mailOptions);
    // await transporter.sendMail(mailOptions, (err: any, info: any) => {
    //   if (err) console.log(err);
    //   else console.log(info);
    // });
    // Generate salt and hash password
    const password = this.password;
    const saltRounds = 10;
    const salt = bcryptjs_1.default.genSaltSync(saltRounds);
    const hash = bcryptjs_1.default.hashSync(password, salt);
    this.password = hash;
    // Initialize workloads
    // await WorkloadController.initializeWorkloads(this.userId);
});
// INSTANCE METHODS
// Ensure correct password
// userSchema.methods.isValidPassword = async (password: string) => {
// 	// Hash sent password and compare with db hash
// 	const compare = bcrypt.compare(password, this.password, (err, res) => {
// 		logger.error(err);
// 	});
// 	return compare;
// };
const User = mongoose_1.default.model('User', userSchema);
exports.default = User;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3VzZXIvdXNlci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdEQUE4QjtBQUU5Qix3REFBZ0M7QUFLaEMsOERBQW9EO0FBRXBELE1BQU0sVUFBVSxHQUFHLElBQUksa0JBQVEsQ0FBQyxNQUFNLENBQ3JDO0lBQ0MsTUFBTSxFQUFFO1FBQ1AsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsSUFBSTtLQUNaO0lBQ0QsUUFBUSxFQUFFO1FBQ1QsSUFBSSxFQUFFLE1BQU07S0FDWjtJQUNELEtBQUssRUFBRTtRQUNOLElBQUksRUFBRSxNQUFNO1FBQ1osU0FBUyxFQUFFLElBQUk7S0FDZjtJQUNELFNBQVMsRUFBRTtRQUNWLElBQUksRUFBRSxNQUFNO0tBQ1o7SUFDRCxRQUFRLEVBQUU7UUFDVCxJQUFJLEVBQUUsTUFBTTtLQUNaO0lBQ0QsUUFBUSxFQUFFO1FBQ1QsSUFBSSxFQUFFLE1BQU07S0FDWjtJQUNELGFBQWEsRUFBRTtRQUNkO1lBQ0MsSUFBSSxFQUFFLE1BQU07WUFDWixHQUFHLEVBQUUsWUFBWTtTQUNqQjtLQUNEO0lBQ0QsVUFBVSxFQUFFO1FBQ1gsSUFBSSxFQUFFLE1BQU07UUFDWixHQUFHLEVBQUUsVUFBVTtLQUNmO0lBQ0QsWUFBWSxFQUFFO1FBQ2IsSUFBSSxFQUFFLE1BQU07UUFDWixHQUFHLEVBQUUsWUFBWTtLQUNqQjtJQUNELE1BQU0sRUFBRTtRQUNQLElBQUksRUFBRSxNQUFNO0tBQ1o7SUFDRCxXQUFXLEVBQUU7UUFDWixJQUFJLEVBQUUsTUFBTTtLQUNaO0lBQ0QsYUFBYSxFQUFFO1FBQ2QsSUFBSSxFQUFFLE1BQU07UUFDWixPQUFPLEVBQUUsVUFBVTtRQUNuQixHQUFHLEVBQUUsV0FBVztLQUNoQjtJQUNELFNBQVMsRUFBRTtRQUNWLElBQUksRUFBRSxJQUFJO0tBQ1Y7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