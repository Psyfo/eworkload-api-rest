import bcrypt from 'bcryptjs';
import mongoose from 'mongoose';
import { logger } from '../../config/logger.config';
import { IUser } from './user.interface';

const userSchema = new mongoose.Schema(
	{
		userId: {
			type: String,
			unique: true
		},
		password: {
			type: String
		},
		email: {
			type: String,
			lowercase: true
		},
		firstName: {
			type: String
		},
		lastName: {
			type: String
		},
		photoUrl: {
			type: String
		},
		disciplineIds: [
			{
				type: String,
				ref: 'Discipline'
			}
		],
		positionId: {
			type: String,
			ref: 'Position'
		},
		departmentId: {
			type: String,
			ref: 'Department'
		},
		gender: {
			type: String
		},
		nationality: {
			type: String
		},
		workFocusName: {
			type: String,
			default: 'Balanced',
			ref: 'WorkFocus'
		},
		createdAt: {
			type: Date
		},
		updatedAt: {
			type: Date
		}
	},
	{
		timestamps: true,
		toJSON: {
			virtuals: true
		},
		toObject: {
			virtuals: true
		}
	}
);

// VIRTUALS
userSchema.virtual('disciplines', {
	ref: 'Discipline',
	localField: 'disciplineIds',
	foreignField: 'disciplineId'
});
userSchema.virtual('position', {
	ref: 'Position',
	localField: 'positionId',
	foreignField: 'positionId',
	justOne: true
});
userSchema.virtual('workFocus', {
	ref: 'WorkFocus',
	localField: 'workFocusName',
	foreignField: 'name',
	justOne: true
});
userSchema.virtual('department', {
	ref: 'Department',
	localField: 'departmentId',
	foreignField: 'departmentId',
	justOne: true
});
// userSchema.virtual('full').get(function (this: any) {
//   return (
//     this.userId +
//     '.' +
//     this.email +
//     '.' +
//     this.firstName +
//     '.' +
//     this.lastName +
//     '.' +
//     this.photoUrl +
//     '.' +
//     this.workFocusName +
//     '.' +
//     this.disciplineId +
//     '.' +
//     this.positionId +
//     '.' +
//     this.gender +
//     '.' +
//     this.nationality
//   );
// });

// HOOKS
// Pre-hook to hash password. Make sure to use function and not arrow (lexical 'this' problem)
userSchema.pre('save', function (this: IUser, next) {
	// Generate default Work Focus
	if (!this.workFocusName) {
		this.workFocusName = 'Balanced';
	}

	// Generate random password
	// user.password = Math.random().toString(36).slice(-8);
	this.password = 'Password01';
	logger.info(this.password);

	// Prepare and send user account mail
	// const mailOptions = {
	//   from: "c4mahlangu@gmail.com", // sender address
	//   to: user.email, // list of receivers
	//   subject: "Eworkload Credentials", // Subject line
	//   html: `<p>Welcome to the Eworkload system. Please find default credentials below</p>
	//         <p>User ID: ${user.userId}</p>
	//         <p>Password: ${user.password}</p>
	//         <br>
	//         <p>Autogenerated password may be changed from the user profile at any time.</p>
	//         <p>Kind regards</p>
	//         <p>Administrator</p>`, // plain text body
	// };
	// console.log("Mail options", mailOptions);
	// await transporter.sendMail(mailOptions, (err: any, info: any) => {
	//   if (err) console.log(err);
	//   else console.log(info);
	// });

	// Generate salt and hash password
	const password: string = this.password;
	const saltRounds = 10;
	const salt = bcrypt.genSaltSync(saltRounds);
	const hash = bcrypt.hashSync(password, salt);
	this.password = hash;
	next();
	// Initialize workloads
	// await WorkloadController.initializeWorkloads(this.userId);
});

// INSTANCE METHODS
// Ensure correct password
// userSchema.methods.isValidPassword = async (password: string) => {
// 	// Hash sent password and compare with db hash
// 	const compare = bcrypt.compare(password, this.password, (err, res) => {
// 		logger.error(err);
// 	});
// 	return compare;
// };

const User = mongoose.model('User', userSchema);
export default User;
